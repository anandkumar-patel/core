** Generics was added in Java 5 to provide compile-time type checking and removing 
risk of ClassCastException that was common while working with collection classes.

** Generics allows us to create a single class, interface, and method 
that can be used with different types of data (objects).

** Generics does not work with primitive types (int, float, char, etc).

** Java Generics supports multiple bounds also, i.e <T extends A & B & C>. 
In this case, A can be an interface or class. 
If A is class then B and C should be an interface. We can’t have more than one class in multiple bounds.


Note - if we don't mention the type of generic class then it's take by default Object,
and if the class/method is of Bounded type then it take that data type

1- GenericClass.java
	This class is example of simple generic class.

2- GenericClassBoundedType.java
	This class is example of generic class with certain data types, which get 
	mentioned by the extends.

3- GenericMethodClass.java
	This class is example of generic method with all data type and with certain data types
	

Type Parameters in Java Generics
The type parameters naming conventions are important to learn generics thoroughly. 
The common type parameters are as follows:
	T – Type
	E – Element
	K – Key
	V – Value
	N – Number
	S,U,V etc. - 2nd, 3rd, 4th types
	
	